{"/home/travis/build/npmtest/node-npmtest-hoodie/test.js":"/* istanbul instrument in package npmtest_hoodie */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hoodie/lib.npmtest_hoodie.js":"/* istanbul instrument in package npmtest_hoodie */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_hoodie = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_hoodie = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-hoodie/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-hoodie && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_hoodie */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_hoodie\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_hoodie.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_hoodie.rollup.js'] =\n            local.assetsDict['/assets.npmtest_hoodie.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_hoodie.__dirname + '/lib.npmtest_hoodie.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/server/index.js":"module.exports.register = register\nmodule.exports.register.attributes = {\n  name: 'hoodie'\n}\n\nvar corsHeaders = require('hapi-cors-headers')\nvar hoodieServer = require('@hoodie/server').register\nvar _ = require('lodash')\n\nvar registerPlugins = require('./plugins')\n\nfunction register (server, options, next) {\n  options = _.cloneDeep(options)\n  _.defaultsDeep(options, {\n    paths: {\n      public: 'public'\n    }\n  })\n\n  server.ext('onPreResponse', corsHeaders)\n\n  server.register({register: hoodieServer, options: options}, function (error) {\n    if (error) {\n      return next(error)\n    }\n    registerPlugins(server, options, function (error) {\n      if (error) {\n        return next(error)\n      }\n\n      next(null, server, options)\n    })\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/server/plugins/index.js":"module.exports = registerPlugins\n\nvar log = require('npmlog')\nvar path = require('path')\nvar requireResolve = require('./resolver')\n\nfunction checkModule (module) {\n  try {\n    requireResolve(module)\n    return true\n  } catch (err) {\n    if (err.code !== 'MODULE_NOT_FOUND') {\n      throw err\n    }\n    return false\n  }\n}\n\nfunction registerPlugins (server, config, callback) {\n  var options = {\n    config: config\n  }\n  var hapiPlugins = [\n    require('inert')\n  ]\n\n  var localPlugins = [\n    './client',\n    './logger',\n    './maybe-force-gzip',\n    './public'\n  ]\n    .concat(\n  [\n    path.resolve('hoodie/server')\n  ]\n    .filter(checkModule)\n    )\n    .map(function (register) {\n      return {\n        options: options,\n        register: require(register)\n      }\n    })\n\n  log.silly('hapi', 'Registering internal plugins')\n  server.register(hapiPlugins.concat(localPlugins), function (error) {\n    if (error) {\n      return callback(error)\n    }\n\n    log.info('hapi', 'plugins registered')\n    callback(null)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/server/plugins/resolver.js":"module.exports = require.resolve\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/bin/setup.js":"#!/usr/bin/env node\n\nvar path = require('path')\nvar fs = require('fs')\nvar log = require('npmlog')\n\n// use process.env to access npm config environment variables.\n// - https://docs.npmjs.com/misc/config#environment-variables\n// - https://docs.npmjs.com/misc/config#save\nvar saveRequested = process.env.npm_config_save\n\n// This block only executes if Hoodie is installed with `-S` or `--save` flags.\nif (saveRequested) {\n  var pathToAppRoot = path.resolve('..', '..')\n  var packageJson = require(path.join(pathToAppRoot, 'package.json'))\n\n  packageJson.scripts = packageJson.scripts || {}\n\n  if (packageJson.scripts[ 'start' ]) {\n    if (!(packageJson.scripts[ 'start' ].startsWith('hoodie'))) {\n      log.info('setup', 'start script already set to \"' + packageJson.scripts[ 'start' ] +\n      ', you can start hoodie with \"npm run start-hoodie\" instead')\n      packageJson.scripts[ 'start-hoodie' ] = 'hoodie'\n    }\n  } else {\n    packageJson.scripts[ 'start' ] = 'hoodie'\n  }\n\n  var newPackageJson = JSON.stringify(packageJson, null, 2)\n\n  fs.writeFile(path.join(pathToAppRoot, 'package.json'), newPackageJson,\n    function (error) {\n      if (error) {\n        log.error('setup', 'Could not create package.json at ' + path.join(pathToAppRoot, 'package.json'))\n        log.error(error)\n        return\n      }\n      log.info('setup', 'Start your Hoodie app with \"npm start\"')\n    })\n\n  // Create README.md if one is not found.\n  // - https://nodejs.org/api/fs.html#fs_fs_access_path_mode_callback\n  var readmePath = path.join(pathToAppRoot, 'README.md')\n  fs.open(readmePath, 'wx',\n    function (error, fd) {\n      if (error) {\n        if (error.code === 'EEXIST') {\n          log.verbose('setup', 'README.md already exists')\n          return\n        } else {\n          log.error('setup', 'Something went wrong when opening README.md at ' + pathToAppRoot)\n          log.error(error)\n          return\n        }\n      }\n\n      // - https://nodejs.org/api/path.html#path_path_parse_path\n      var base = path.parse(pathToAppRoot).base\n      var readMeContents = '# ' + base + '\\n' + 'Created with [hoodie](https://github.com/hoodiehq)'\n      fs.writeFile(readmePath, readMeContents,\n        function (error) {\n          if (error) {\n            log.error('setup', 'Could not create README.md at ' + pathToAppRoot)\n            log.error(error)\n            return\n          }\n          log.info('setup', 'README.md created')\n        })\n    })\n}\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/bin/start.js":"#!/usr/bin/env node\n\nvar cli = require('../cli')\n\nvar emoji = require('node-emoji')\n\ncli(function (error, server) {\n  if (error) {\n    throw error\n  }\n\n  console.log((process.platform === 'darwin' ? emoji.get('dog') + '  ' : '') + 'Your Hoodie app has started on:', server.info.uri)\n  console.log('Stop server with control + c')\n})\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/cli/index.js":"module.exports = run\n\nvar log = require('npmlog')\nvar Hapi = require('hapi')\n\nvar assureFolders = require('./assure-folders')\nvar compatibilityCheck = require('./compatibility-check.js')\nvar getOptions = require('./options')\nvar getHapiOptions = require('./hapi-options')\nvar parseOptions = require('./parse-options')\n\nvar hoodie = require('../server').register\n\nfunction run (callback) {\n  compatibilityCheck(function (error) {\n    if (error) {\n      log.error('env', error.message)\n      return callback(error)\n    }\n\n    var projectPath = process.cwd()\n    var options = getOptions(projectPath)\n\n    log.level = options.loglevel\n    log.verbose('app', 'Initialising')\n\n    assureFolders(options, function (error) {\n      if (error) {\n        log.error('app', error.message)\n        return callback(error)\n      }\n\n      var hapiOptions = getHapiOptions(options)\n      var server = new Hapi.Server(hapiOptions.server)\n      server.connection(hapiOptions.connection)\n\n      server.register({\n        register: hoodie,\n        options: parseOptions(options)\n      }, function (error) {\n        if (error) {\n          return callback(error)\n        }\n\n        server.start(function (error) {\n          callback(error, server)\n        })\n      })\n    })\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/cli/assure-folders.js":"module.exports = assureFolders\n\nvar path = require('path')\nvar mkdirp = require('mkdirp')\nvar parallel = require('async').parallel\n\nfunction assureFolders (options, callback) {\n  if (options.inMemory) {\n    return callback()\n  }\n\n  var tasks = [\n    mkdirp.bind(null, options.data)\n  ]\n\n  if (!options.dbUrl) {\n    var storeFilesPath = path.join(options.data, 'data') + path.sep\n    tasks.push(mkdirp.bind(null, storeFilesPath))\n  }\n\n  parallel(tasks, callback)\n}\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/cli/compatibility-check.js":"module.exports = compatibilityCheck\n\nvar semver = require('semver')\n\nfunction compatibilityCheck (callback) {\n  if (semver.lt(process.versions.node, '4.0.0')) {\n    return callback(new Error('A node version >=4 is required to run Hoodie'))\n  }\n\n  callback(null)\n}\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/cli/options.js":"module.exports = getCliOptions\n\nvar log = require('npmlog')\nvar pick = require('lodash').pick\nvar rc = require('rc')\nvar yargs = require('yargs')\n\nvar getAppDefaults = require('./app-defaults')\nvar getHoodieDefaults = require('./hoodie-defaults')\nvar webrootLocator = require('./webroot-locator')\n\nfunction getCliOptions (projectPath) {\n  var hoodieDefaults = getHoodieDefaults()\n  var appDefaults = getAppDefaults(projectPath)\n\n  // Order of defaults\n  //\n  // 1. Hoodie defaults\n  // 2. App defaults\n  // 3. rc (https://www.npmjs.com/package/rc) – note we don’t read CLI through rc\n  var defaults = rc('hoodie', hoodieDefaults, appDefaults)\n\n  var options = yargs\n    .options({\n      loglevel: {\n        choices: [\n          'silly',\n          'verbose',\n          'info',\n          'http',\n          'warn',\n          'error',\n          'silent'\n        ],\n        default: defaults.loglevel\n      },\n      port: {\n        type: 'number',\n        default: defaults.port,\n        describe: 'Port-number to run the Hoodie App on'\n      },\n      address: {\n        type: 'string',\n        default: defaults.address,\n        describe: 'Address to which Hoodie binds'\n      },\n      bindAddress: {\n        type: 'string',\n        describe: '[DEPRECATED] Address to which Hoodie binds (see --address)'\n      },\n      data: {\n        type: 'string',\n        default: defaults.data,\n        describe: 'Data path'\n      },\n      public: {\n        type: 'string',\n        default: defaults.public,\n        describe: 'Path to static assets'\n      },\n      m: {\n        alias: 'in-memory',\n        type: 'boolean',\n        default: defaults.inMemory,\n        describe: 'Whether to start the PouchDB Server in memory'\n      },\n      dbUrl: {\n        type: 'string',\n        default: defaults.dbUrl,\n        describe: 'If provided, uses external CouchDB. (Can contain auth credentials)'\n      },\n      dbUrlPassword: {\n        type: 'string',\n        default: defaults.dbUrlPassword,\n        describe: 'Provides the password for auth with the db at dbUrl (requires dbUrl and/or dbUrlUsername)'\n      },\n      dbUrlUsername: {\n        type: 'string',\n        default: defaults.dbUrlUsername,\n        describe: 'Provides the username for auth with the db at dbUrl (requires dbUrl and dbUrlPassword)'\n      },\n      dbAdapter: {\n        type: 'string',\n        default: defaults.dbAdapter,\n        describe: 'Default PouchDB Adapter (https://pouchdb.com/adapters.html).'\n      },\n      url: {\n        type: 'string',\n        default: defaults.url,\n        describe: 'URL at which Hoodie Server is accessible (e.g. http://myhoodieapp.com)'\n      },\n      adminPassword: {\n        type: 'string',\n        default: defaults.adminPassword,\n        describe: 'Password to login to Admin Dashboard. Login is not possible unless set.'\n      }\n    })\n    .help('h', 'Show this help message')\n    .alias('h', 'help')\n    .alias('h', 'usage')\n    .showHelpOnFail(false, 'Specify --help for available options')\n    .version(function () {\n      try {\n        var pkg = require('../package.json')\n        console.log(pkg.version, '\\n')\n        process.exit(0)\n      } catch (e) {\n        process.exit(1)\n      }\n    })\n    .alias('v', 'version')\n    .env('hoodie')\n    .epilogue('Options can also be specified as environment variables (prefixed with \"hoodie_\") or inside a \".hoodierc\" file (json or ini).')\n    .wrap(Math.min(150, yargs.terminalWidth()))\n    .argv\n\n  if (options.bindAddress) {\n    log.warn('The use of --bindAddress is deprecated. Use the --address option instead.')\n    options.address = options.bindAddress\n  }\n\n  options.public = webrootLocator(options.public)\n\n  // rc & yargs are setting keys we are not interested in, like in-memory or _\n  // so we only pick the relevant ones based on they keys of the default options.\n  return pick(options, Object.keys(hoodieDefaults))\n}\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/cli/app-defaults.js":"module.exports = getAppDefaults\n\nvar join = require('path').join\n\nfunction getAppDefaults (projectPath) {\n  var pkg = require(join(projectPath, 'package.json'))\n  var appOptions = pkg.hoodie || {}\n\n  appOptions.name = pkg.name\n\n  return appOptions\n}\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/cli/hapi-options.js":"module.exports = getHapiOptions\n\nvar url = require('url')\n\nfunction getHapiOptions (options) {\n  var hapiOptions = {\n    server: {},\n    connection: {\n      port: options.port,\n      address: options.address,\n      routes: { log: true }\n    }\n  }\n\n  if (options.loglevel === 'debug') {\n    hapiOptions.server.debug = {\n      request: ['error'],\n      log: ['error']\n    }\n  }\n\n  if (options.url) {\n    hapiOptions.connection.host = url.parse(options.url).hostname\n  } else {\n    hapiOptions.connection.host = 'localhost'\n  }\n\n  return hapiOptions\n}\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/cli/hoodie-defaults.js":"module.exports = getHoodieDefaults\n\nfunction getHoodieDefaults () {\n  return {\n    address: '127.0.0.1',\n    port: 8080,\n    data: '.hoodie',\n    public: 'public',\n    dbUrl: undefined,\n    dbUrlPassword: undefined,\n    dbUrlUsername: undefined,\n    dbAdapter: 'pouchdb-adapter-fs',\n    inMemory: false,\n    loglevel: 'warn',\n    url: undefined,\n    adminPassword: undefined\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/cli/parse-options.js":"module.exports = parseOptions\n\nvar log = require('npmlog')\nvar path = require('path')\n\nvar PouchDB = require('pouchdb-core')\n\nvar createAuthDbUrl = require('./utils/create-auth-dbUrl')\n\n/**\n * Parse options into internal config structure.\n *\n * Options are all the things that users can pass in to Hoodie as described at\n * https://github.com/hoodiehq/hoodie#usage. All these options are flat, while\n * internally we group theem into db, connection and path options.\n *\n * `appOptions` are app-specific default options configured in the\n * app’s package.json (on the `\"hoodie\"` key).\n *\n * The parsing of the database configuration is a bit more complex. If `dbUrl`\n * is passed it means that a remote CouchDB is used for persistance, otherwise\n * PouchDB is being used. A shortcut to set PouchDB’s adapter to memdown is to\n * passe set the `inMemory: true` option. If it’s not set, leveldown is used\n * with the prefix set to `options.data` + 'data' (`.hoodie/data` by default).\n *\n */\n\nfunction parseOptions (options) {\n  var dbOptions = {}\n\n  var config = {\n    loglevel: options.loglevel,\n    paths: {\n      data: options.data,\n      public: options.public\n    },\n    inMemory: Boolean(options.inMemory)\n  }\n\n  log.level = config.loglevel\n\n  if (options.url) {\n    config.url = options.url\n  }\n\n  if (options.adminPassword) {\n    config.adminPassword = options.adminPassword\n  }\n\n  PouchDB.plugin(require('pouchdb-mapreduce'))\n\n  options.dbUrl = createAuthDbUrl(options.dbUrlUsername, options.dbUrlPassword, options.dbUrl)\n\n  if (options.dbUrl) {\n    PouchDB.plugin(require('pouchdb-adapter-http'))\n    dbOptions.prefix = options.dbUrl\n    log.info('config', 'Storing all data in ' + options.dbUrl)\n  } else if (options.inMemory) {\n    PouchDB.plugin(require('pouchdb-adapter-memory'))\n    config.inMemory = true\n    log.info('config', 'Storing all data in memory only')\n  } else {\n    PouchDB.plugin(require(options.dbAdapter))\n    dbOptions.prefix = path.join(config.paths.data, 'data') + path.sep\n    log.info('config', 'Storing all data in ' + dbOptions.prefix + ' using ' + options.dbAdapter)\n  }\n  config.PouchDB = PouchDB.defaults(dbOptions)\n\n  return config\n}\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/cli/utils/create-auth-dbUrl.js":"module.exports = createAuthDbUrl\n\nvar log = require('npmlog')\nlog.level = 'warn'\n\n/**\n * Parse username, password and url for external db, via options object and returns the modified dbUrl\n * with username and password encoded in URL encoding\n *\n * @param dbUsername used for parsing options.dbUrlUsername\n * @param dbPassword used for parsing options.dbUrlPassword\n * @param dbUrl used for parsing options.dbUrl\n *\n * @var dbUrlParts contains different parts of dbUrl, helping in modifing username and password\n *\n * @returns dbUrl based on the parameters\n * @throws Error if dbUrl is unparsable or authDetails are missing\n *\n */\n\nfunction createAuthDbUrl (dbUsername, dbPassword, dbUrl) {\n  var dbUrlParts = {\n    prefix: '',\n    authDetails: '',\n    url: ''\n  }\n\n  if (dbUrl) {\n    dbUrlParts.prefix = dbUrl.startsWith('https://') ? (\n      dbUrl = dbUrl.replace('https://', ''),\n      'https://'\n    ) : (\n      dbUrl = dbUrl.replace('http://', ''),\n      'http://'\n    )\n\n    if (dbUrl.includes('@')) {\n      dbUrlParts.authDetails = dbUrl.split('@').slice(0, -1).join('@')\n      dbUrlParts.url = dbUrl.replace(dbUrlParts.authDetails + '@', '')\n\n      if (!dbUrlParts.authDetails) throw new Error('dbUrl: ' + '\"' + dbUrlParts.prefix + dbUrl + '\"' + ' does not include authentication details')\n\n      if (dbUrlParts.authDetails.includes(':')) {\n        if (dbUrlParts.authDetails.match(/:/gi).length >= 2) throw new Error('Could not find username & password in dbUrl. Please try setting --dbUrlUsername and --dbUrlPassword if either contains special characters like : or @')\n\n        if (!dbUrlParts.authDetails.split(':')[1]) {\n          throw new Error('Password is missing from --dbUrl after symbol \":\"')\n        }\n\n        if (!dbUrlParts.authDetails.split(':')[0]) {\n          throw new Error('Username is missing from --dbUrl after symbol \":\"')\n        }\n\n        if (dbUsername || dbPassword) {\n          log.warn('DB config', '--dbUsername and --dbPassword are replacing authentication details of --dbUrl')\n\n          return dbUrlParts.prefix + (dbUsername ? encodeURIComponent(dbUsername) : encodeURIComponent(dbUrlParts.authDetails.split(':')[0])) + ':' + (dbPassword ? encodeURIComponent(dbPassword) : encodeURIComponent(dbUrlParts.authDetails.split(':')[1])) + '@' + dbUrlParts.url\n        }\n\n        return dbUrlParts.prefix + (dbUrlParts.authDetails.split(':').map(n => encodeURIComponent(n)).join(':')) + '@' + dbUrlParts.url\n      }\n\n      if (dbPassword) {\n        return dbUrlParts.prefix + encodeURIComponent(dbUrlParts.authDetails) + ':' + encodeURIComponent(dbPassword) + '@' + dbUrlParts.url\n      } else {\n        throw new Error('Password has not been specified for dbUrl: ' + dbUrlParts.prefix + dbUrl + '. ' +\n          'Use --dbUrlPassword or provide it within --dbUrl.')\n      }\n    } else {\n      if (!(dbUsername && dbPassword)) {\n        throw new Error('Authentication credentials (username AND password) are missing from dbUrl. Provide them either by --dbUrl directly or by setting --dbUrlUsername and --dbUrlPassword arguments.')\n      }\n      return dbUrlParts.prefix + encodeURIComponent(dbUsername) + ':' + encodeURIComponent(dbPassword) + '@' + dbUrl\n    }\n  } else {\n    if (dbUsername || dbPassword) {\n      log.warn('DB url config', 'No dbAddress is provided in order to authenticate with credentials(username:password): ' + dbUsername + ':' + dbPassword)\n      log.warn('DB config', 'Setting db automatically depending on --inMemory. To see more, use --loglevel=info')\n    }\n    return undefined\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/cli/webroot-locator.js":"module.exports = locateWebroot\n\nvar fs = require('fs')\nvar pathModule = require('path')\n\nfunction locateWebroot (path) {\n  if (fs.existsSync(path) && fs.statSync(path).isDirectory()) {\n    return path\n  }\n\n  return pathModule.resolve(__dirname, '../public')\n}\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/public/account/client.js":"/* global hoodie */\n'use strict'\n\nvar actions = {\n  login: function login () {\n    var username = document.querySelector('input[id=\"login-username-field\"]').value\n    var password = document.querySelector('input[id=\"login-password-field\"]').value\n    return hoodie.account.signIn({ username: username, password: password })\n  },\n  register: function register () {\n    var username = document.querySelector('input[id=\"register-username-field\"]').value\n    var password = document.querySelector('input[id=\"register-password-field\"]').value\n    return hoodie.account.signUp({ username: username, password: password })\n  },\n  reset: function reset () {\n    var contact = document.querySelector('input[id=\"reset-email-field\"]').value\n    return hoodie.account.request({ type: 'passwordreset', contact: contact })\n  },\n  update: function update () {\n    var username = document.querySelector('input[id=\"update-username-field\"]').value\n    var password = document.querySelector('input[id=\"update-password-field\"]').value\n    if (password === '') {\n      return hoodie.account.update({ username: username })\n    } else {\n      return hoodie.account.update({ username: username, password: password })\n    }\n  },\n  logout: function logout () {\n    return hoodie.account.signOut()\n  },\n  destroy: function destroy () {\n    return hoodie.account.destroy()\n  }\n}\n\n// Event Listener for Actions\ndocument.querySelector('body').addEventListener('click', function (event) {\n  document.querySelectorAll('.messages').forEach(function (node) {\n    node.innerHTML = ''\n  })\n  if (actions[event.target.id] !== undefined) {\n    actions[event.target.id]().then(function (r) {\n      if (event.target.id === 'login') {\n        document.querySelectorAll('.input-forms').forEach(function (node) {\n          return node.setAttribute('data-hide', 'true')\n        })\n        document.querySelectorAll('.profile-forms').forEach(function (node) {\n          return node.setAttribute('data-hide', 'false')\n        })\n      } else if (event.target.id === 'register') {\n        var node = document.querySelector('#register-response')\n        node.style.color = 'green'\n        node.innerHTML = 'Successfully Registration: Please sign in to access profile settings'\n      } else if (event.target.id === 'destroy' || event.target.id === 'logout') {\n        document.querySelectorAll('.profile-forms').forEach(function (node) {\n          return node.setAttribute('data-hide', 'true')\n        })\n        document.querySelectorAll('.input-forms').forEach(function (node) {\n          return node.setAttribute('data-hide', 'false')\n        })\n      } else if (event.target.id === 'update') {\n        var _node = document.querySelector('#update-response')\n        _node.style.color = 'green'\n        _node.innerHTML = 'Successful Updation'\n      }\n    }).catch(function (e) {\n      if (event.target.id === 'login') {\n        var node = document.querySelector('#login-response')\n        node.style.color = 'red'\n        node.innerHTML = e\n      } else if (event.target.id === 'register') {\n        var _node2 = document.querySelector('#register-response')\n        _node2.style.color = 'red'\n        _node2.innerHTML = e\n      } else if (event.target.id === 'reset') {\n        var _node3 = document.querySelector('#password-reset-response')\n        _node3.style.color = 'red'\n        _node3.innerHTML = e\n      }\n    })\n  }\n})\n\nhoodie.account.get('session').then(function (session) {\n  // Client Rendering Logic\n  if (session) {\n    document.querySelector('.generic-loader-wrap').setAttribute('data-hide', 'true')\n    document.querySelectorAll('.profile-forms').forEach(function (node) {\n      return node.setAttribute('data-hide', 'false')\n    })\n  } else {\n    document.querySelector('.generic-loader-wrap').setAttribute('data-hide', 'true')\n    document.querySelectorAll('.input-forms').forEach(function (node) {\n      return node.setAttribute('data-hide', 'false')\n    })\n  }\n})\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/server/plugins/good-hoodie.js":"var Transform = require('stream').Transform\nvar util = require('util')\n\nvar log = require('npmlog')\nvar qs = require('querystring')\n\nfunction HoodieTransform () {\n  if (!(this instanceof HoodieTransform)) {\n    return new HoodieTransform()\n  }\n  Transform.call(this, {\n    objectMode: true,\n    transform: transform\n  })\n}\n\nutil.inherits(HoodieTransform, Transform)\n\nfunction transform (data, enc, next) {\n  if (data.event === 'error') {\n    log.error(\n      data.error.name,\n      new Date(data.timestamp).toISOString(),\n      data.error.message,\n      data.error\n    )\n  }\n\n  if (data.event === 'response') {\n    var path = data.path +\n      (Object.keys(data.query).length ? '?' + qs.stringify(data.query) : '')\n    log.http(\n      data.event,\n      new Date(data.timestamp).toISOString() + ' -',\n      data.source.remoteAddress + ' -',\n      data.method.toUpperCase(),\n      path,\n      data.statusCode,\n      data.responseTime + 'ms'\n    )\n  }\n\n  if (data.event === 'request' || data.event === 'log') {\n    var level = findLogLevel(Object.keys(log.levels), data.tags) || 'verbose'\n    log[level](\n      data.event,\n      new Date(data.timestamp).toISOString(),\n      data.tags.length ? data.tags : data.data,\n      data.tags.length ? data.data : ''\n    )\n  }\n\n  log.silly(data.event, data)\n  next(null)\n}\n\nfunction findLogLevel (levels, tags) {\n  for (var i = 0; i < tags.length; i++) {\n    for (var j = 0; j < levels.length; j++) {\n      if (levels[j] === tags[i]) {\n        tags.splice(i, 1)\n        return levels[j]\n      }\n    }\n  }\n}\n\nmodule.exports = HoodieTransform\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/server/plugins/logger.js":"module.exports.register = register\nmodule.exports.register.attributes = {\n  name: 'hoodie-local-logger'\n}\n\nvar path = require('path')\n\nfunction register (server, options, next) {\n  server.register({\n    register: require('good'),\n    options: {\n      ops: {\n        interval: 30000\n      },\n      reporters: {\n        hoodieReporter: [\n          {\n            module: 'good-squeeze',\n            name: 'Squeeze',\n            args: [\n              {\n                ops: '*',\n                response: '*',\n                log: '*',\n                error: '*',\n                request: '*'\n              }\n            ]\n          },\n          {\n            module: path.join(__dirname, 'good-hoodie')\n          }\n        ]\n      }\n    }\n  }, next)\n}\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/server/plugins/maybe-force-gzip.js":"module.exports.register = register\nmodule.exports.register.attributes = {\n  name: 'hoodie-local-maybe-force-gzip'\n}\n\n// allow clients to request a gzip response, even if the\n// Accept-Encoding headers is missing or mangled due to\n// faulty proxy servers\n// http://www.stevesouders.com/blog/2010/07/12/velocity-forcing-gzip-compression/\nfunction register (server, options, next) {\n  server.ext('onPreHandler', function maybeForceGzip (request, reply) {\n    if (request.query.force_gzip === 'true') {\n      request.info.acceptEncoding = 'gzip'\n    }\n    reply.continue()\n  })\n\n  next()\n}\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/server/plugins/public.js":"module.exports.register = register\nmodule.exports.register.attributes = {\n  name: 'hoodie-local-public',\n  dependencies: 'inert'\n}\n\nvar createReadStream = require('fs').createReadStream\nvar pathJoin = require('path').join\n\nfunction register (server, options, next) {\n  var publicFolder = options.config.paths.public\n  var hoodieVersion\n  try {\n    hoodieVersion = require('hoodie/package.json').version\n  } catch (err) {\n    hoodieVersion = 'development'\n  }\n\n  var hoodiePublicPath = pathJoin(require.resolve('../../package.json'), '..', 'public')\n  var adminPublicPath = pathJoin(require.resolve('@hoodie/admin/package.json'), '..', 'dist')\n\n  server.route([{\n    method: 'GET',\n    path: '/{p*}',\n    handler: {\n      directory: {\n        path: publicFolder,\n        listing: false,\n        index: true\n      }\n    }\n  }, {\n    method: 'GET',\n    path: '/hoodie/{p*}',\n    handler: {\n      directory: {\n        path: hoodiePublicPath,\n        listing: false,\n        index: true\n      }\n    }\n  }, {\n    method: 'GET',\n    path: '/hoodie/admin/{p*}',\n    handler: {\n      directory: {\n        path: adminPublicPath,\n        listing: false,\n        index: true\n      }\n    }\n  }, {\n    method: 'GET',\n    path: '/hoodie/info.json',\n    handler: function (request, reply) {\n      reply({\n        hoodie: true,\n        name: options.config.name,\n        version: hoodieVersion\n      })\n    }\n  }])\n\n  // serve app whenever an html page is requested\n  // and no other document is available\n  var app = pathJoin(publicFolder, 'index.html')\n  server.ext('onPostHandler', function (request, reply) {\n    var response = request.response\n\n    if (!response.isBoom) {\n      return reply.continue()\n    }\n\n    var is404 = response.output.statusCode === 404\n    var isHtmlRequest = /text\\/html/.test(request.headers.accept)\n    var isHoodiePath = /^\\/hoodie\\//.test(request.path)\n    var isAdminPublicPath = /^\\/hoodie\\/admin\\//.test(request.path) && !(/^\\/hoodie\\/admin\\/api\\//).test(request.path)\n\n    if (isAdminPublicPath && isHtmlRequest) {\n      return reply(createReadStream(pathJoin(adminPublicPath, 'index.html')))\n    }\n\n    if (isHoodiePath) {\n      return reply.continue()\n    }\n\n    if (is404 && isHtmlRequest) {\n      return reply(createReadStream(app))\n    }\n\n    reply.continue()\n  })\n\n  return next()\n}\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/server/plugins/client/bundle-handler-factory.js":"module.exports = createBundleHandler\n\nvar log = require('npmlog')\n\nvar bundleClient = require('./bundle')\nvar writeClientBundle = require('./bundle-writer')\n\nfunction createBundleHandler (hoodieClientPath, bundleTargetPath, bundleConfig) {\n  var bundlePromise\n\n  return function (request, reply) {\n    if (!bundlePromise) {\n      bundlePromise = new Promise(function (resolve, reject) {\n        log.silly('client', 'bundling')\n        bundleClient(hoodieClientPath, bundleTargetPath, bundleConfig, function (error, bundleBuffer, hasUpdate) {\n          if (error) {\n            return reject(error)\n          }\n\n          writeClientBundle(hasUpdate, bundleConfig.inMemory, bundleTargetPath, bundleBuffer)\n\n          resolve(bundleBuffer)\n        })\n      })\n    }\n\n    bundlePromise.then(function (buffer) {\n      reply(buffer).bytes(buffer.length).type('application/javascript')\n    }).catch(reply)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/server/plugins/client/bundle.js":"module.exports = bundleClient\n\nvar fs = require('fs')\nvar path = require('path')\nvar parallel = require('async').parallel\nvar requireResolve = require('../resolver')\n\nfunction checkModule (module) {\n  try {\n    requireResolve(module)\n    return true\n  } catch (err) {\n    if (err.code !== 'MODULE_NOT_FOUND') {\n      throw err\n    }\n    return false\n  }\n}\n\n/**\n * we compare the mtime (modified time) for the last modified dependency of the\n * Hoodie client and the target bundle file. If the latter does not exist or\n * any dependency was modified more recently, we read out the client and add\n * the `new Hoodie()` init code, otherwise we simply read out the bundle file.\n *\n * This optimisation is in preparation for plugins. Plugins can extend the\n * client, so we need to browserify on-the-fly to avoid dependency duplication,\n * and avoiding unneeded bundling with browserify saves a significant time.\n */\nfunction bundleClient (hoodieClientPath, bundleTargetPath, config, callback) {\n  var plugins = [\n    path.resolve('hoodie/client')\n  ].filter(checkModule)\n  var getPluginsModifiedTimes = plugins.map(function (pluginPath) {\n    return getModifiedTime.bind(null, requireResolve(pluginPath))\n  })\n\n  parallel(getPluginsModifiedTimes.concat([\n    getModifiedTime.bind(null, hoodieClientPath),\n    getModifiedTime.bind(null, bundleTargetPath)\n  ]), function (error, results) {\n    /* istanbul ignore if */\n    if (error) {\n      return callback(error)\n    }\n\n    var targetTime = results.pop()\n    var sourceTime = Math.max.apply(null, results)\n    var hasUpdate = sourceTime > targetTime\n\n    var get = hasUpdate ? buildBundle.bind(null, config, plugins) : fs.readFile.bind(null, bundleTargetPath)\n\n    get(function (error, buffer) {\n      if (error) {\n        return callback(error)\n      }\n\n      callback(null, buffer, hasUpdate)\n    })\n  })\n}\n\nfunction getModifiedTime (path, callback) {\n  fs.stat(path, function (error, stats) {\n    // we can ignore error, it means the file does not exist which is fine\n    if (error) {\n      return callback(null, -1)\n    }\n\n    callback(null, +stats.mtime)\n  })\n}\n\nfunction buildBundle (config, plugins, callback) {\n  var ReadableStream = require('stream').Readable\n  var browserify = require('browserify')\n  var stream = new ReadableStream()\n\n  var b = browserify(stream, {\n    standalone: 'hoodie'\n  })\n  var hoodieBundleSource = ''\n\n  hoodieBundleSource += 'var Hoodie = require(\"@hoodie/client\")\\n'\n  hoodieBundleSource += 'var options = {\\n'\n  if (config.url) {\n    hoodieBundleSource += '  url: \"' + config.url + '\",\\n'\n  } else {\n    hoodieBundleSource += '  url: location.origin,\\n'\n  }\n  hoodieBundleSource += '  PouchDB: require(\"pouchdb-browser\")\\n'\n  hoodieBundleSource += '}\\n'\n  hoodieBundleSource += 'module.exports = new Hoodie(options)\\n'\n  plugins.forEach(function (pluginPath) {\n    hoodieBundleSource += '  .plugin(require(\"' + pluginPath + '\"))\\n'\n  })\n\n  stream.push(hoodieBundleSource)\n  stream.push(null)\n\n  b.bundle(callback)\n}\n","/home/travis/build/npmtest/node-npmtest-hoodie/node_modules/hoodie/server/plugins/client/bundle-writer.js":"module.exports = writeClientBundle\n\nvar fs = require('fs')\n\nvar log = require('npmlog')\n\nfunction writeClientBundle (hasUpdate, inMemory, bundleTargetPath, bundleBuffer) {\n  if (!hasUpdate) {\n    log.info('client', 'bundle is up to date')\n    return\n  }\n\n  if (inMemory) {\n    log.silly('client', 'running in memory, not writing bundle to ' + bundleTargetPath)\n    return\n  }\n\n  log.info('client', 'bundle is out of date')\n  log.silly('client', 'writing bundle to ' + bundleTargetPath)\n  fs.writeFile(bundleTargetPath, bundleBuffer, function (error) {\n    if (error) {\n      log.warn('client', 'could not write to ' + bundleTargetPath + '. Bundle cannot be cached and will be re-generated on server restart')\n      return\n    }\n\n    log.info('client', 'bundle written to ' + bundleTargetPath)\n  })\n}\n"}